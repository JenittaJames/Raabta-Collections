<%- include('../partials/admin/header') %>

<div class="container mt-4">
    <div class="row mb-3">
        <div class="col-12">
            <a href="/admin/orders" class="btn btn-secondary">← Back to Orders</a>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Order <%= order.orderNumber %></h4>
                    <span class="badge bg-<%= order.orderStatus === 'Delivered' ? 'success' : order.orderStatus === 'Cancelled' ? 'danger' : 'warning' %>">
                        <%= order.orderStatus %>
                    </span>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <h5>Order Details</h5>
                            <p><strong>Order Date:</strong> <%= new Date(order.createdAt).toLocaleString() %></p>
                            <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
                            <p><strong>Payment Status:</strong> <%= order.paymentStatus %></p>
                        </div>
                        <div class="col-md-6">
                            <h5>Customer Details</h5>
                            <p><strong>Name:</strong> <%= order.userId.userName || order.userId.name || 'N/A' %></p>
                            <p><strong>Email:</strong> <%= order.userId.email || 'N/A' %></p>
                            <p><strong>Phone:</strong> <%= order.userId.phone || 'N/A' %></p>
                        </div>
                    </div>

                    <div class="row mb-4">
                        <div class="col-12">
                            <h5>Shipping Address</h5>
                            <% if (address && address.address && address.address.length > 0) { %>
                                <div class="address-card">
                                  <% const addr = address.address[0]; %>
                                  <div class="address-name"><%= addr.name || '' %></div>
                                  <p class="address-phone"><%= addr.mobile || '' %></p>
                                  <p class="address-text">
                                    <%= [ addr.houseName, addr.street, addr.city, addr.state,
                                    addr.pincode, addr.country ].filter(Boolean).join(', ') %>
                                  </p>
                                  <span class="address-type"><%= addr.saveAs || '' %></span>
                                </div>
                                <% } else { %>
                                <p>No delivery address available</p>
                                <% } %>
                        </div>
                    </div>

                    <h5>Order Items</h5>
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Status</th>
                                    <th>Total</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% order.orderedItem.forEach(item => { %>
                                    <tr data-product-id="<%= item._id %>">
                                        <td>
                                            <% if (item.productId) { %>
                                                <%= item.productId.productName %>
                                            <% } else { %>
                                                Product Unavailable
                                            <% } %>
                                        </td>
                                        <td>₹<%= item.productPrice.toFixed(2) %></td>
                                        <td><%= item.quantity %></td>
                                        <td>
                                            <select class="form-select product-status-dropdown" data-order-id="<%= order._id %>" data-product-id="<%= item._id %>">
                                                <% 
                                                // Define which options should be disabled based on current product status
                                                const isProductDelivered = item.productStatus === 'Delivered';
                                                const isProductCancelledOrReturned = item.productStatus === 'Cancelled' || item.productStatus === 'Returned';
                                                
                                                // Helper function to determine if an option should be disabled
                                                function isProductOptionDisabled(optionValue) {
                                                    if (isProductDelivered && optionValue !== 'Returned') {
                                                        return true;
                                                    }
                                                    if (isProductCancelledOrReturned) {
                                                        return true;
                                                    }
                                                    return false;
                                                }
                                                %>
                                                
                                                <option value="Pending" <%= item.productStatus === 'Pending' ? 'selected' : '' %> <%= isProductOptionDisabled('Pending') ? 'disabled' : '' %>>Pending</option>
                                                <option value="Shipped" <%= item.productStatus === 'Shipped' ? 'selected' : '' %> <%= isProductOptionDisabled('Shipped') ? 'disabled' : '' %>>Shipped</option>
                                                <option value="Delivered" <%= item.productStatus === 'Delivered' ? 'selected' : '' %> <%= isProductOptionDisabled('Delivered') ? 'disabled' : '' %>>Delivered</option>
                                                <option value="Cancelled" <%= item.productStatus === 'Cancelled' ? 'selected' : '' %> <%= isProductOptionDisabled('Cancelled') ? 'disabled' : '' %>>Cancelled</option>
                                                <option value="Returned" <%= item.productStatus === 'Returned' ? 'selected' : '' %> <%= isProductOptionDisabled('Returned') ? 'disabled' : '' %>>Returned</option>
                                            </select>
                                        </td>
                                        <td>₹<%= item.totalProductPrice.toFixed(2) %></td>
                                        <td>
                                            <% if (item.productStatus === 'Return Requested') { %>
                                                <div class="btn-group">
                                                    <button class="btn btn-success btn-sm approve-return" data-product-id="<%= item._id %>">
                                                        Approve Return
                                                    </button>
                                                    <button class="btn btn-danger btn-sm reject-return" data-product-id="<%= item._id %>">
                                                        Reject
                                                    </button>
                                                </div>
                                                <div class="mt-2 alert alert-warning">
                                                    <strong>Return Reason:</strong> 
                                                    <% if (item.returnReason && item.returnReason.trim()) { %>
                                                        <%= item.returnReason %>
                                                    <% } else { %>
                                                        <em>No reason provided</em>
                                                    <% } %>
                                                </div>
                                            <% } %>
                                        </td>
                                    </tr>
                                <% }) %>
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th colspan="4" class="text-end">Order Total:</th>
                                    <th>₹<%= order.orderAmount.toFixed(2) %></th>
                                    <th></th>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Update Order Status</h5>
                </div>
                <div class="card-body">
                    <form id="updateOrderForm">
                        <input type="hidden" name="orderId" value="<%= order._id %>">
                        
                        <div class="mb-3">
                            <label for="orderStatus" class="form-label">Order Status</label>
                            <select class="form-select" id="orderStatus" name="orderStatus">
                                <% 
                                // Define which options should be disabled based on current order status
                                const isDelivered = order.orderStatus === 'Delivered';
                                const isCancelledOrReturned = order.orderStatus === 'Cancelled' || order.orderStatus === 'Returned';
                                
                                // Helper function to determine if an option should be disabled
                                function isOptionDisabled(optionValue) {
                                    if (isDelivered && optionValue !== 'Returned') {
                                        return true;
                                    }
                                    if (isCancelledOrReturned) {
                                        return true;
                                    }
                                    return false;
                                }
                                %>
                                
                                <option value="Pending" <%= order.orderStatus === 'Pending' ? 'selected' : '' %> <%= isOptionDisabled('Pending') ? 'disabled' : '' %>>Pending</option>
                                <option value="Shipped" <%= order.orderStatus === 'Shipped' ? 'selected' : '' %> <%= isOptionDisabled('Shipped') ? 'disabled' : '' %>>Shipped</option>
                                <option value="Delivered" <%= order.orderStatus === 'Delivered' ? 'selected' : '' %> <%= isOptionDisabled('Delivered') ? 'disabled' : '' %>>Delivered</option>
                                <option value="Cancelled" <%= order.orderStatus === 'Cancelled' ? 'selected' : '' %> <%= isOptionDisabled('Cancelled') ? 'disabled' : '' %>>Cancelled</option>
                                <option value="Returned" <%= order.orderStatus === 'Returned' ? 'selected' : '' %> <%= isOptionDisabled('Returned') ? 'disabled' : '' %>>Returned</option>
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label for="paymentStatus" class="form-label">Payment Status</label>
                            <select class="form-select" id="paymentStatus" name="paymentStatus">
                                <% 
                                // Define which options should be disabled based on current payment status
                                const isPending = order.paymentStatus === 'pending';
                                const isPaid = order.paymentStatus === 'paid';
                                const isFailed = order.paymentStatus === 'failed';
                                const isRefunded = order.paymentStatus === 'refunded' || order.paymentStatus === 'partially-refunded';
                                
                                // Helper function to determine if an option should be disabled
                                function isDisabled(optionValue) {
                                    if (isPaid && (optionValue === 'pending' || optionValue === 'failed')) {
                                        return true;
                                    }
                                    if (isFailed && optionValue !== 'failed') {
                                        return true;
                                    }
                                    if (isRefunded && (optionValue !== 'refunded' && optionValue !== 'partially-refunded')) {
                                        return true;
                                    }
                                    return false;
                                }
                                %>
                                
                                <option value="pending" <%= order.paymentStatus === 'pending' ? 'selected' : '' %> <%= isDisabled('pending') ? 'disabled' : '' %>>Pending</option>
                                <option value="paid" <%= order.paymentStatus === 'paid' ? 'selected' : '' %> <%= isDisabled('paid') ? 'disabled' : '' %>>Paid</option>
                                <option value="failed" <%= order.paymentStatus === 'failed' ? 'selected' : '' %> <%= isDisabled('failed') ? 'disabled' : '' %>>Failed</option>
                                <option value="refunded" <%= order.paymentStatus === 'refunded' ? 'selected' : '' %> <%= isDisabled('refunded') ? 'disabled' : '' %>>Refunded</option>
                                <option value="partially-refunded" <%= order.paymentStatus === 'partially-refunded' ? 'selected' : '' %> <%= isDisabled('partially-refunded') ? 'disabled' : '' %>>Partially Refunded</option>
                            </select>
                        </div>
                        
                        <button type="submit" class="btn btn-primary w-100">Update Status</button>
                    </form>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Order Timeline</h5>
                </div>
                <div class="card-body">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <strong>Order Placed</strong>
                                    <p class="mb-0">Status: Created</p>
                                </div>
                                <small><%= new Date(order.createdAt).toLocaleString() %></small>
                            </div>
                        </li>
                        <% if (order.updatedAt && order.updatedAt > order.createdAt) { %>
                            <li class="list-group-item">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <strong>Last Updated</strong>
                                        <p class="mb-0">Status: <%= order.orderStatus %></p>
                                    </div>
                                    <small><%= new Date(order.updatedAt).toLocaleString() %></small>
                                </div>
                            </li>
                        <% } %>

                        <% 
                        // Check for return requests in any order item
                        const returnItems = order.orderedItem.filter(item => 
                            item.productStatus === 'Return Requested' || 
                            item.productStatus === 'Return Approved' || 
                            item.productStatus === 'Return Rejected'
                        );
                        
                        for (const item of returnItems) { 
                        %>
                            <li class="list-group-item">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <strong>Return <%= 
                                            item.productStatus === 'Return Requested' ? 'Requested' : 
                                            item.productStatus === 'Return Approved' ? 'Approved' : 'Rejected' 
                                        %></strong>
                                        <p class="mb-0">
                                            Product: <%= item.productId ? item.productId.productName : 'Product' %>
                                        </p>
                                        <% if (item.returnReason) { %>
                                        <p class="mb-0 text-muted">
                                            <small>Reason: <%= item.returnReason %></small>
                                        </p>
                                        <% } %>
                                    </div>
                                    <small><%= new Date(item.updatedAt || order.updatedAt).toLocaleString() %></small>
                                </div>
                            </li>
                        <% } %>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const updateOrderForm = document.getElementById('updateOrderForm');
    
    updateOrderForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const updateData = {
            orderId: formData.get('orderId'),
            orderStatus: formData.get('orderStatus'),
            paymentStatus: formData.get('paymentStatus')
        };
        
        fetch('/admin/orders/update-status', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updateData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message using SweetAlert
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Order status updated successfully',
                    confirmButtonText: 'OK'
                }).then(() => {
                    // Reload the page to reflect the changes
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed',
                    text: 'Failed to update order status: ' + data.message,
                    confirmButtonText: 'OK'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while updating order status',
                confirmButtonText: 'OK'
            });
        });
    });

    // Handle return approval
    document.querySelectorAll('.approve-return').forEach(button => {
        button.addEventListener('click', function() {
            const productId = this.getAttribute('data-product-id');
            const orderId = '<%= order._id %>';
            
            verifyReturn(orderId, productId, 'Return Approved');
        });
    });

    // Handle return rejection
    document.querySelectorAll('.reject-return').forEach(button => {
        button.addEventListener('click', function() {
            const productId = this.getAttribute('data-product-id');
            const orderId = '<%= order._id %>';
            
            verifyReturn(orderId, productId, 'Return Rejected');
        });
    });

    // Function to verify return request
    function verifyReturn(orderId, productId, status) {
        fetch('/admin/orders/verify-return', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                orderId: orderId,
                productId: productId,
                status: status
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message using SweetAlert
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: data.message,
                    confirmButtonText: 'OK'
                }).then(() => {
                    // Reload the page to reflect the changes
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed',
                    text: 'Failed to process return: ' + data.message,
                    confirmButtonText: 'OK'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while processing the return request',
                confirmButtonText: 'OK'
            });
        });
    }
});


document.addEventListener('DOMContentLoaded', function() {
    // Handle product status updates
    document.querySelectorAll('.product-status-dropdown').forEach(dropdown => {
    dropdown.addEventListener('change', function() {
        const orderId = this.getAttribute('data-order-id');
        const productId = this.getAttribute('data-product-id');
        const productStatus = this.value;

        // Confirm before making the change
        Swal.fire({
            title: 'Update Product Status',
            text: `Are you sure you want to change this product's status to ${productStatus}?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, update it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/admin/orders/update-product-status', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        orderId: orderId,
                        productId: productId,  // Make sure this is correctly being passed
                        productStatus: productStatus
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'Product status updated successfully',
                            confirmButtonText: 'OK'
                        });
                        
                        // Update UI for just this product
                        const productRow = this.closest('tr');
                        
                        // Apply the status restrictions without reloading
                        const allOptions = this.querySelectorAll('option');
                        const isDelivered = productStatus === 'Delivered';
                        const isCancelledOrReturned = productStatus === 'Cancelled' || productStatus === 'Returned';
                        
                        allOptions.forEach(option => {
                            if (isDelivered && option.value !== 'Returned') {
                                option.disabled = true;
                            } else if (isCancelledOrReturned) {
                                option.disabled = true;
                            }
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed',
                            text: 'Failed to update product status: ' + data.message,
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while updating product status',
                        confirmButtonText: 'OK'
                    });
                });
            } else {
                // Reset the dropdown to its previous value
                this.value = this.getAttribute('data-original-status') || 'Pending';
            }
        });
    });
    
    // Store original status when the page loads
    dropdown.setAttribute('data-original-status', dropdown.value);
});
});

</script>

<%- include('../partials/admin/footer') %>